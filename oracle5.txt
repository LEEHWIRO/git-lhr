--조인정리
카티젼프로덕트 : 모든 열과 행이 조합
내부조인 : 카티젼프로덕트 결과에서 기본키 = 외래키 인 데이터
외부조인 : 한쪽의 모든 데이터를출력(기본은 내부조인)
셀프조인 : 하나의 테이블을 마치 여러개의 테이블처럼 조인
--ANSI 표준
CROSS JOIN : 카티젼프로덕트
INNER JOIN : 내부조인
OUTER JOIN : 외부조인
SELF JOIN  : 셀프조인
NATURAL JOIN
--집계함수 5총사 / 집계복음 : 집계함수 이외의 컬럼들은 GROUP BY 절에 그대로 모두 기술함
SUM
AVG
MAX
MIN
COUNT
--집계가 완료된 후에 집계함수 자체에 조건을 줄때
HAVING

--------------------서브쿼리---------------------------
--상품코드  상품명 거래처코드   거래처명
--단, 서브쿼리 이용
SELECT P.PROD_ID  상품코드
     , P.PROD_NAME  상품명
     , P.PROD_BUYER  거래처코드
     , B.BUYER_NAME 거래처명
FROM   PROD P, BUYER B
WHERE  P.PROD_BUYER = B.BUYER_ID;

--서브쿼리 3총사
--SCALAR SUBQUREY : SELECT절에 사용
--INLINE VIEW : FROM절에 사용
--NESTED SUBQUREY : WHERE절에 사용

SELECT A.PROD_ID  상품코드
     , A.PROD_NAME  상품명
     , A.PROD_BUYER  거래처코드
     , (SELECT BUYER_NAME FROM BUYER WHERE BUYER_ID = A.PROD_BUYER) 거래처명
FROM   PROD A;

---- 회원ID(CART_MEMBER), 회원명, 주문번호(CART_NO), 
--   상품코드(CART_PROD), 수량(CART_QTY)
--   단, 서브쿼리 이용
SELECT A.CART_MEMBER 회원ID
     , (SELECT MEM_NAME FROM MEMBER WHERE MEM_ID = A.CART_MEMBER) 회원명
     , A.CART_NO 주문번호
     , A.CART_PROD 상품코드
     , A.CART_QTY 수량
FROM   CART A;

--SCALAR 서브쿼리1
-- 입고일자(BUY_DATE), 상품코드(BUY_PROD)
--,상품명, 매입수량(BUY_QTY), 매입단가(BUY_COST)
-- 단, 서브쿼리 이용
SELECT BUY_DATE 입고일자
     , BUY_PROD 상품코드
     , (SELECT PROD_NAME FROM PROD WHERE PROD_ID = BUY_PROD) 상품명
     , BUY_QTY 매입수량
     , BUY_COST 매입단가
FROM   BUYPROD;

--SCALAR 서브쿼리2
-- 거래처코드(BUYER_ID), 거래처명(BUYER_NAME)
--,상품분류코드(BUYER_LGU), 상품분류명
-- 단, 서브쿼리 이용
SELECT BUYER_ID
     , BUYER_NAME
     , BUYER_LGU
     , (SELECT LPROD_NM FROM LPROD WHERE LPROD_GU = BUYER_LGU)
FROM   BUYER

--NESTED 서브쿼리1
--NESTED 서브쿼리 : WHERE절에 사용된 서브쿼리
--상품분류가 컴퓨터제품인 상품의 리스트를 출력하기
--ALIAS : 상품코드, 상품명, 상품분류코드
SELECT PROD_ID 상품코드
     , PROD_NAME 상품명
     , PROD_LGU 상품분류코드
FROM   PROD
WHERE  PROD_LGU = (SELECT LPROD_GU FROM LPROD WHERE LPROD_NM ='컴퓨터제품');

--NESTED 서브쿼리2
--NESTED 서브쿼리 : WHERE절에 사용된 서브쿼리
--상품분류가 컴퓨터제품인 거래처 리스트를 출력하기
--ALIAS : 거래처코드, 거래처명, 상품분류코드
SELECT BUYER_ID 거래처코드
     , BUYER_NAME 거래처명
     , BUYER_LGU 상품분류코드
FROM   BUYER
WHERE  BUYER_LGU = (SELECT LPROD_GU FROM LPROD WHERE LPROD_NM ='컴퓨터제품');

--NESTED 서브쿼리3
--NESTED 서브쿼리 : WHERE절에 사용된 서브쿼리
--상품분류가 전자제품인 상품매입 현황 리스트를 출력하기
--ALIAS : 입고일자, 상품코드, 매입수량, 매입단가
--힌트 : 상품코드에 상품분류코드가 있음.
SELECT BUY_DATE 입고일자
     , BUY_PROD 상품코드
     , BUY_QTY 매입수량
     , BUY_COST 매입단가
FROM   BUYPROD
WHERE  SUBSTR(BUY_PROD,1,4) = (SELECT LPROD_GU FROM LPROD WHERE LPROD_NM ='전자제품');

--NESTED 서브쿼리4
--NESTED 서브쿼리 : WHERE절에 사용된 서브쿼리
--장바구니테이블에서 정은실 회원의 구매 현황을 출력
--ALIAS : 주문번호, 상품코드, 회원ID, 수량
SELECT CART_NO 주문번호 
     , CART_PROD 상품코드
     , CART_MEMBER 회원ID
     , CART_QTY 수량
FROM   CART
WHERE  CART_MEMBER = (SELECT MEM_ID FROM MEMBER WHERE MEM_NAME = '정은실');

--상품Table에서 판매가가 상품평균판매가 보다 큰 상품을 
--검색하시오 ?  (Alias는 상품명,판매가,평균판매가)
--SCLAR / NESTED SUBQUERY
SELECT PROD_NAME 상품명
     , PROD_SALE 판매가
     , (SELECT AVG(PROD_SALE) FROM PROD)평균판매가
FROM   PROD, (SELECT AVG(PROD_SALE) AVG_SALE  FROM PROD) A  
WHERE  PROD_SALE > (SELECT AVG(PROD_SALE) FROM PROD);

--INLINE VIEW 1
SELECT B.PROD_NAME 상품명
     , B.PROD_SALE 판매가
     , A.AVG_SALE 평균판매가
FROM   PROD B, (SELECT AVG(PROD_SALE) AVG_SALE  FROM PROD) A  
WHERE  B.PROD_SALE > A.AVG_SALE;

--INLINE VIEW 2
--회원테이블에서 마일리지가 평균마일리지 보다 큰 회원을
--검색하시오 ? (ALIAS : 회원명, 마일리지, 평균마일리지)
SELECT B.MEM_NAME 회원명
     , B.MEM_MILEAGE 마일리지 
     , A.AVG_MILEAGE 평균마일리지
FROM   MEMBER B, (SELECT ROUND(AVG(NVL(MEM_MILEAGE,0)),1) AVG_MILEAGE FROM MEMBER) A
WHERE  B.MEM_MILEAGE > A.AVG_MILEAGE;

--평균,카운트 할떄는 무조건 널처리 하자.

