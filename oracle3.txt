-- ADD_MONTHS : 월 더하기
SELECT ADD_MONTHS(SYSDATE, 5) FROM DUAL;
--NEXT_DAY(date, char) : 해당 날짜 이후의 가장 빠른 요일의 날짜 char : 월, 월요일, …
--LAST_DAY(date) : 월의 마지막 날짜
SELECT NEXT_DAY(SYSDATE, '월요일')
     , LAST_DAY(SYSDATE) 
FROM DUAL;

-- EXTRACT : 날짜에서 필요한부분만 추출
SELECT EXTRACT(YEAR FROM SYSDATE) "년도"
     , EXTRACT(MONTH FROM SYSDATE) "월"
     , EXTRACT(DAY FROM SYSDATE) "일"
     , EXTRACT(HOUR FROM SYSTIMESTAMP) +9 몇시
     , EXTRACT(MINUTE FROM SYSTIMESTAMP) 몇분
     , EXTRACT(SECOND FROM SYSTIMESTAMP) 몇초
FROM   DUAL;

--스키마(Schema) : 구조
--테이블 스키마 : 컬럼, 자료형, 크기, 제약사항, 키..
--생일이 3월인 회원을 검색하시오
--(ALIAS : 회원ID(MEM_ID),
-- 회원명(MEM_NAME), 생일(MEM_BIR))75/03/23
/*
"생일이 3월인 회원"이라는 것은 조건이라는 것임
쿼리에서 조건에 해당되는 절은? WHERE
따라서 생일이 3월인 회원을 검색하려면 해당 조건을 WHERE절에서
처리해줘야함
*/
SELECT MEM_ID   회원ID
     , MEM_NAME 회원명
     , MEM_BIR  생일
FROM MEMBER
WHERE 1=1
--AND MEM_BIR LIKE '%/03/%';
--AND EXTRACT(MONTH FROM MEM_BIR) = 03;
--AND SUBSTR(MEM_BIR,4,2) = '03';
AND MEM_BIR LIKE '__/03/__';
--를 해보면.. 날짜 데이터가 '76/01/15'와 같음을 알 수 있음
--LIKE 구문을 사용해도 되고, EXTRACT 함수를 사용해도 됨
-- 이 때 EXTRACT 결과는 숫자이므로 3이라는 숫자로써 비교하기
-- SUBSTR함수를 사용해도 되는데 EXTRACT와 다른 점은
-- SUBSTR함수의 결과는 문자라는 것임

SELECT BUY_PROD 상품코드
     , BUY_DATE 입고일자
     , BUY_QTY  매입수량
     , BUY_COST 매입단가
FROM   BUYPROD
WHERE  1=1
--AND    EXTRACT(MONTH FROM BUY_DATE) = 3
AND    SUBSTR(BUY_DATE,4,2) = '03'
--AND    BUY_DATE LIKE '%/03/%'
ORDER BY BUY_DATE;

/*
입고일자 데이터를 보면 "05/01/08"이런 형식으로 되어있음
EXTRACT를 사용하여 BUY_DATE컬럼의 데이터로부터 월을 추출할 수 있음
이 때 EXTRACT함수 결과는 숫자이므로 3이라는 숫자와 비교연산해야 함
SUBSTR('05/01/08',4,2) => 4라는 것은 4번째 글자부터 시작한다는 의미이고
2라는 것은 2글자를 의미하므로 "01"이 추출됨. 이 때 SUBSTR함수의 결과는
문자이므로 '03'이라는 문자형데이터와 비교연산해야함.
LIKE의 경우 '%/03/%'와 비교하면 될 것임. 이 때 %는 와일드카드.
*/

--문제 : 나는 몇 일을 살았는가? TO_DATE('2015-04-10')함수 이용
--단, 밥은 하루에 3번을 먹음
--소수점 2째자리까지 살리느 반올림으로 처리하시오
--ALIAS : 내생일 산일수 밥먹은수 밥먹은비용(한끼에 3000원으로 처리)
SELECT TO_DATE('1995-01-20') 내생일
     , TO_DATE('2021-01-27') - TO_DATE('1995-01-20') 산일수
     , (TO_DATE('2021-01-27') - TO_DATE('1995-01-20'))*3 밥먹은수
     , ROUND((SYSDATE - TO_DATE('1995-01-20'))*3*3000,2) 밥먹은비용
FROM DUAL;

TO_CHAR : 숫자, 문자, 날짜를 지정한 형식의 문자열 변환

--오른쪽정렬(숫자)
SELECT  3.1415 FROM DUAL;
--왼쪽정렬(문자열)
SELECT  '3.1415' FROM DUAL;
--오른쪽정렬(숫자형문자열을 숫자형으로 형변환)
SELECT  TO_NUMBER( '3.1415')FROM DUAL;
-- TO_CHAR 지정문자 'L' -> 원단위 문자로 변환
SELECT  TO_CHAR(TO_NUMBER('￦1,200','L999,999')+1,'L999,999') FROM DUAL;


