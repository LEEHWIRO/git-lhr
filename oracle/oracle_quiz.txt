1. 연봉이 12000 이상되는 직원들의 LAST_NAME 및 연봉을 조회한다.

SELECT LAST_NAME
     , SALARY
FROM   EMPLOYEES
WHERE  SALARY >= 12000;

2. 사원번호가 176 인 사람의 LAST_NAME 과 부서 번호를 조회한다.
SELECT LAST_NAME
     , DEPARTMENT_ID
FROM   EMPLOYEES
WHERE   EMPLOYEE_ID = 176;

3. 연봉이 5000 에서 12000의 범위 이외인 사람들의 LAST_NAME 및 연봉을 조회한다.
SELECT LAST_NAME
     , SALARY
FROM   EMPLOYEES
WHERE  NOT(SALARY BETWEEN 5000 AND 12000)
ORDER BY SALARY;

4. 1998/02/20 일부터 1998/05/01 사이에 고용된 사원들의 LAST_NAME 사번, 고용일자를 조회한다.
SELECT LAST_NAME
     , JOB_ID
     , HIRE_DATE
FROM   EMPLOYEES
WHERE  HIRE_DATE BETWEEN TO_DATE('2002/02/20') AND  TO_DATE('2005/05/01')
ORDER BY HIRE_DATE;

5. 20 번 및 50 번 부서에게 근무하는 모든 사원들의 LAST_NAME 및 부서 번호를 알파벳순으로 조회한다.
SELECT LAST_NAME
     , DEPARTMENT_ID
FROM   EMPLOYEES
WHERE  1=1
--OR     DEPARTMENT_ID = 20
--OR     DEPARTMENT_ID = 50
AND    DEPARTMENT_ID IN(20, 50)
ORDER BY LAST_NAME;

6. 20번 및 50번 부서에 근무하며, 연봉이 5000~ 12000사이인 사원들의 LAST_MAME 및 연봉을 조회한다.
SELECT LAST_NAME EMPLOYEES
     , SALARY
FROM   EMPLOYEES
WHERE  DEPARTMENT_ID IN(20,50)
AND    SALARY BETWEEN 5000 AND 12000;

7. 1994년도에 고용된 모든 사람들의 LAST_NAME 및 고용일을 조회한다.
SELECT LAST_NAME
     , HIRE_DATE
FROM   EMPLOYEES
WHERE  HIRE_DATE LIKE '04%';

8. 매니저가 없는 사람들의 LAST_NAME 및 JOB_ID 를 조회한다.
SELECT LAST_NAME
     , JOB_ID
FROM   EMPLOYEES
WHERE  MANAGER_ID IS NULL;

9. 커미션을 버는 모든 사원들의 LAST_NAME, 연봉 및 커미션을 조회한다.
SELECT LAST_NAME
     , SALARY
     , COMMISSION_PCT
FROM   EMPLOYEES
WHERE  COMMISSION_PCT IS NOT NULL
ORDER BY 2 DESC, 3 DESC;

10. LAST_NAME 의 네번째 글자가 a인 사원들의 LAST_NAME을 조회한다.
SELECT LAST_NAME
FROM   EMPLOYEES
WHERE  LAST_NAME LIKE '___a%';

11. LAST_NAME 에 a 및 e 글자가 있는 사원들의 LAST_NAME 을 조회한다.
SELECT LAST_NAME
FROM   EMPLOYEES
WHERE  LAST_NAME LIKE '%a%'
AND    LAST_NAME LIKE '%e%';

12. 연봉이 2,500, 3,500, 7000 이 아니며 직업이 SA_REP 이나 ST_CLERK 인 사람들을 조회한다.
SELECT LAST_NAME
     , JOB_ID
     , SALARY
FROM   EMPLOYEES
WHERE  NOT(SALARY IN(2500, 3500, 7000))
AND    JOB_ID IN('SA_REP', 'ST_CLERK');

13. 
SELECT JOB_ID
     , REPLACEJOB_ID
FROM   EMPLOYEES;

14.
SELECT A.LAST_NAME
     , B.DEPARTMENT_ID
     , B.DEPARTMENT_NAME
FROM   EMPLOYEES A, DEPARTMENT B
WHERE  A.DEPARTMENT_ID = B.DEPARTMENT_ID;

20.
SELECT A.JOB_ID
     , MAX(B.MAX_SALARY) 최대연봉
     , MIN(B.MIN_SALARY) 최소연봉
     , SUM(A.SALARY) 연봉총합
     , ROUND(AVG(A.SALARY),0) 평균연봉
FROM   EMPLOYEES A INNER JOIN JOBS B ON(A.JOB_ID = B.JOB_ID)
GROUP BY A.JOB_ID;

SELECT A.JOB_ID
     , MAX(A.MAX_SALARY) 최대연봉
     , MIN(A.MIN_SALARY) 최소연봉
     , SUM(B.SALARY) 연봉총합
     , ROUND(AVG(B.SALARY),0) 평균연봉
FROM   JOBS A LEFT OUTER JOIN EMPLOYEES B ON(A.JOB_ID = B.JOB_ID)
GROUP BY A.JOB_ID
ORDER BY A.JOB_ID;

24.
SELECT A.MANAGER_ID 매니저
     , MIN(A.SALARY) 연봉
     , COUNT(A.EMPLOYEE_ID)
     , B.FIRST_NAME
     , B.LAST_NAME
FROM   EMPLOYEES A INNER JOIN EMPLOYEES B
ON  (A.MANAGER_ID = B.EMPLOYEE_ID)
AND A.MANAGER_ID IS NOT NULL
GROUP BY A.MANAGER_ID, B.FIRST_NAME, B.LAST_NAME
HAVING MIN(A.SALARY) > 6000
ORDER BY MIN(A.SALARY) DESC;

--25.
SELECT B.DEPARTMENT_NAME Name
     , C.LOCATION_ID Location
     , COUNT(A.EMPLOYEE_ID) People
     , ROUND(AVG(A.SALARY),2) Salary
FROM   EMPLOYEES A INNER JOIN DEPARTMENTS B ON(A.DEPARTMENT_ID = B.DEPARTMENT_ID)
                   INNER JOIN LOCATIONS C ON(B.LOCATION_ID = C.LOCATION_ID)
GROUP BY B.DEPARTMENT_NAME, C.LOCATION_ID;

26.
SELECT 
     


