1. PL/SQL
Anonymous block : 단순 스크립트에서 실행되는 블록 서버에 저장되지 않는다.
Stored Procedure : 자주 실행되거나, 복잡한 비지니스 로직을 미리 작성하여 서버에 저장하여 사용한다.
User Function : Procedure 와 유사하며, 실행결과를 반환한다.
Package : 여러 Procedure, Function 및 변수등을 하나로 묶는다.
Trigger : 테이블이나 뷰에 INSERT, UPDATE, DELETE 등이 수행 전 또는 수행 후 자동 실행되는 Procedure
2. 절차형 SQL 문법
(1). 블록
(2). 문장

3. 절차형 SQL 실행원리
DECLARE
 - Declation Section(옵션)
  : 변수, 상수, CURSOR 와 USER_DEFINE Exception 등 선언
BEGIN
 - Excutable Section(필수)
  : 처리할 명령문들을 절차적으로 기술SQL문, 반복문, 조건문, BEGIN으로 시작 END로 끝남
EXCEPTION
 - Exception Section(옵션)
  : 오류처리에 관한 명령문을 기술
END

/
SET SERVEROUTPUT ON; -- 로그인
/
DECLARE
  V_I NUMBER(9,2) := 123456.78;
  V_STR VARCHAR2(20) := '홍길동';
  C_PI CONSTANT NUMBER(8,6) := 3.141592;
  V_FLAG BOOLEAN NOT NULL := TRUE;
  V_DATE VARCHAR2(10) := TO_CHAR(SYSDATE, 'YYYY-MM-DD');
BEGIN
  DBMS_OUTPUT.PUT_LINE('V_I : ' ||V_I);
  DBMS_OUTPUT.PUT_LINE('V_STR : ' ||V_STR);
  DBMS_OUTPUT.PUT_LINE('C_PI : ' ||C_PI);
  DBMS_OUTPUT.PUT_LINE('V_DATE : ' ||V_DATE);
 --SYSTEM.OUT.PRINTLN('V_I : '||V_I);
END;
/

4. 매개변수
 (1). 변수의 종류
      SCLAR 변수 : 데이터 하나만을 저장하는 일반적인 변수
      REFERENCES 변수 : 해당 테이블의 row나 column의 타입과 크기를 참조하는 변수
      COMPOSITE 변수 : PL/SQL에서 사용하는 배열 변수 RECODE TYPE   TABLE TYPE
      BIND 변수 : 파라미터로 넘겨지는 IN, INOUT에서 사용되는 변수 리턴되는 값을 전달받기 위해 선언되는 변수
 (2). SCLAR 변수에 사용되는 데이터형
 CHAR[(N)] : 고정길이문자 / BINARY_INTEGER : 정수 / PLS_INTEGER : 정수(속도 빠름) / 
 NUMBER[(P, S)] : 고정 및 부동 소숫점 수 / VARCHAR2(N) : 가변길이문자열 / DATE : 날짜 /
 BOOLEAN : 논리 / LONG, LONG RAW :Deprecated / 
 (3). REFERENCES 변수에 사용되는 데이터형
 테이블명.컬럼명%TYPE : 해당 테이블의 해당 컬럼의 타입과 동일하게 설정
 테이블명%ROWTYPE : 해당 테이블의 모든 컬럼과 동일하게 지정

5. 분기문
 (1). IF문
 -조건이 TRUE이면 이하 문장을 실행하고, FALSE이면 관련된 문장을 통과한다.
 -ELSIF절은 여러 개가 가능하나, ELSE절은 한 개만 가능하다.
예재1.
DECLARE
  V_NUM NUMBER := 37;
BEGIN
  --DBMS_OUTPUT.ENABLE
  IF MOD(V_NUM,2) = 0 THEN
    DBMS_OUTPUT.PUT_LINE(V_NUM || '는 짝수');
  ELSE
    DBMS_OUTPUT.PUT_LINE(V_NUM || '는 홀수');
  END IF;
END;
/
예재2. 조건에 따른 다중 ELSIF
DECLARE
  V_NUM NUMBER := 77;
BEGIN
  IF V_NUM > 90 THEN
    DBMS_OUTPUT.PUT_LINE('수');
  ELSIF V_NUM > 80 THEN
    DBMS_OUTPUT.PUT_LINE('우');
  ELSIF V_NUM > 70 THEN
    DBMS_OUTPUT.PUT_LINE('미');
  ELSE
    DBMS_OUTPUT.PUT_LINE('분발합시다');
  END IF;
END;
/
예재3. SELECT INTO 로 변수에 값을 할당
DECLARE
  V_AVG_SALE PROD.PROD_SALE%TYPE; --NUMBER(10) --(REFRENCE 변수)
  V_SALE NUMBER := 500000;        --(SCLAR 변수)
BEGIN
  SELECT AVG(PROD_SALE) INTO V_AVG_SALE FROM PROD;
  IF V_SALE < V_AVG_SALE THEN
    DBMS_OUTPUT.PUT_LINE('평균 단가가 500000 초과입니다.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('평균 단가가 500000 이하입니다.');
  END IF;
END;
/
--회원테이블에서 아이디가 'e001' 인 회원의  
--마일리지가 5000을 넘으면 'VIP 회원' 
--그렇지 않다면 '일반회원'으로 
--출력하시오. (회원이름, 마일리지 포함) 
DECLARE
    V_MILEAGE NUMBER := 0;
--  V_NAME    VARCHAR2(20); --SCLAR변수
    V_NAME    MEMBER.MEM_NAME%TYPE; --REFERENCE 변수
BEGIN
  SELECT MEM_MILEAGE, MEM_NAME INTO V_MILEAGE, V_NAME --7150, 이혜나
  FROM   MEMBER
  WHERE  MEM_ID = 'e001';
  
  IF V_MILEAGE > 5000 THEN
      DBMS_OUTPUT.PUT_LINE('VIP회원');
  ELSE
      DBMS_OUTPUT.PUT_LINE('일반회원');
  END IF;
  DBMS_OUTPUT.PUT('V_MILEAGE : ' || V_MILEAGE); -- LINE : 줄넘김
  DBMS_OUTPUT.PUT_LINE('V_NAME : ' || V_NAME);
END;
/
 (2). CASE 문
DECLARE
  V_NUM NUMBER := 77;
BEGIN
  CASE WHEN V_NUM > 90 THEN
    DBMS_OUTPUT.PUT_LINE('수');
  WHEN V_NUM > 80 THEN
    DBMS_OUTPUT.PUT_LINE('우');
  WHEN V_NUM > 70 THEN
    DBMS_OUTPUT.PUT_LINE('미');
  ELSE
    DBMS_OUTPUT.PUT_LINE('분발합시다');
  END CASE;
END;
/
--상품분류가 화장품인 상품의 평균판매가를
--구한 후 평균판매가가 3,000원 미만이면 
--싸다, 3,000원 이상 ~ 6,000원 미만이면 보통,
--6,000원 이상 ~ 9,000원 미만이면 비싸다,
--9,000원 이상이면 너무비싸다를 출력하기
--단, CASE 문 사용하여 처리하기
--출력형식 : 화장품의 평균판매가는 5000원이고 보통이다.
DECLARE
    V_SALE NUMBER;-- 실수
    V_STR  VARCHAR2(20);
BEGIN
    SELECT ROUND(AVG(NVL(PROD_SALE,0)),2) INTO V_SALE --54233.33
    FROM   PROD
    WHERE  PROD_LGU = (
             SELECT LPROD_GU FROM LPROD
             WHERE  LPROD_NM = '화장품'
        );
        
  DBMS_OUTPUT.PUT_LINE('V_SALE : ' || V_SALE);
        
  CASE WHEN V_SALE < 3000 THEN 
         V_STR := ('싸다');
       WHEN V_SALE >= 3000 AND V_SALE < 6000 THEN
         V_STR := ('보통');
       WHEN V_SALE >= 6000 AND V_SALE < 9000 THEN 
         V_STR := ('비싸다');
       ELSE
         V_STR := ('너무비싸다');
    END CASE;
    
    DBMS_OUTPUT.PUT_LINE('화장품의 평균판매가는 ' || V_SALE ||
             '원이고 ' ||V_STR);
END;
/
--가파치 업체의 지역을 검색하여
--다음과 같이 출력하기
--대구 : 경북 
--부산 : 경남
--대전 : 충청
--서울, 인천 : 수도권
--기타 : 기타
--단, CASE문 사용하기
DECLARE
  V_ADD1 VARCHAR2(30);
  V_STR  VARCHAR2(30);
BEGIN
    SELECT SUBSTR(BUYER_ADD1,1,2) INTO V_ADD1 --대구
    FROM   BUYER
    WHERE  BUYER_NAME = '가파치';
  CASE WHEN V_ADD1 = ('대구') THEN
    V_STR :=('경북');
     WHEN V_ADD1 = ('부산') THEN
    V_STR :=('경남');
     WHEN V_ADD1 = ('대전') THEN
    V_STR :=('충청');
     WHEN V_ADD1 = ('서울')AND V_ADD1 = ('인천') THEN
    V_STR :=('수도권');
    ELSE
    V_STR :=('기타');
     
END CASE;
DBMS_OUTPUT.PUT_LINE('가파치의 ' || V_ADD1 ||
             ' : ' ||V_STR);
END;

6.반복문
 (1). WHILE문
 반복될 떄마다 조건을 확인하고 조건이 TRUE가 되어야 LOOP실행
  - 조건이 만족할 때까지 반복 처리
  - EXIT문은 WHILE LOOP를 벗어나게한다.
  - CONTINUE문은 11g부터 제공한다.
--1부터 10까지 더하기
DECLARE 
   V_SUM NUMBER := 0;
   V_VAR NUMBER := 1;
BEGIN
   WHILE V_VAR <= 10 LOOP
      V_SUM := V_SUM + V_VAR;
      V_VAR := V_VAR + 1;
   END LOOP;
   DBMS_OUTPUT.PUT_LINE('1부터 10까지의 합 ='||V_SUM);
END;
/
