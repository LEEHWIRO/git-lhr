		// 배열에 저장된 모든 값의 합계와 평균을 구해주세요.
		int sum = 0;
		for (int i = 0; i < randoms.length; i++) {
			sum += randoms[i];
		}
		double avg = Math.round((double) sum / randoms.length * 10) / 10.0;
		System.out.println("sum : " + sum + " avg : " + avg);

                        //배열에 저장된 값들 중 최소값과 최대값을 출력해주세요.
		int max = randoms[0]; int min = randoms[0];
		for(int i = 0; i < randoms.length; i++){
			if(max<randoms[i]){
				max=randoms[i];
			}
			if(min>randoms[i]){
				min = randoms[i];
			}
		}
		System.out.print("최대값 : "+max);
		System.out.println(" 최소값 : "+min);

		//배열의 값을 섞어주세요.
		//랜덤 인덱스와 0번 인덱스 의 자리를 바꿔주세요. (여러번 반복)
		int[] shuffle = new int[10];
		for(int i = 0; i < shuffle.length; i++){
			shuffle[i] = i + 1;
		}
		System.out.println(Arrays.toString(shuffle)); 

		for(int i = 0; i<shuffle.length*10; i++){
		int random = (int)(Math.random()*shuffle.length);
		int temp = shuffle[0];
		shuffle[0]=shuffle[random];
		shuffle[random]= temp;
		}
		System.out.println(Arrays.toString(shuffle));

		//1~10 사이의 랜덤값을 500번 생성하고, 각 숫자가 생성된 횟수를 출력해주세요.
		int[] counts =new int[10];
		
		for(int i = 0; i < 500; i++){
			int random = (int)(Math.random()*10)+1;
			counts[random-1]++;
		}
                        System.out.println(Arrays.toString(counts));

		/*
		 *  거스름돈에 동전의 단위마다 몇개의 동전이 필요한지 출력해주세요.
		 *  
		 *  거스름돈 : 2860원
		 *  500원 : 5개
		 *  100원 : 3개
		 *  50원 : 1개
		 *  10원 : 1개
		 */
		
//		int money = (int) (Math.random() * 500) * 10;
//		int[] coin = { 500, 100, 50, 10 };
//
//		System.out.println("거스름돈 : " + money);
//
//		for (int i = 0; i < coin.length; i++) {
//			int count = money / coin[i];
//			money = money % coin[i];
//			System.out.println(coin[i] + "원: " + count + "개");
//		}
	
		/*
		 * 1 ~ 5의 숫자가 발생된 만큼 *를 사용해 그래프를 그려주세요.
		 * 
		 * 1: *** 3
		 * 2: **** 4
		 * 3: ** 2
		 * 4: ***** 5
		 * 5: * 1
		 */
		
//		int[] arr = new int[20];
//		for (int i = 0; i < arr.length; i++) {
//			arr[i] = (int) (Math.random() * 5) + 1;
//		}
//		System.out.println(Arrays.toString(arr));
//
//		int[] count = new int[5];
//		for (int i = 0; i < arr.length; i++) {
//			count[arr[i] - 1]++;
//		}
//		for (int i = 0; i < count.length; i++) {
//			System.out.println(i + 1 + " : ");
//			for (int j = 0; j < count[i]; j++) {
//				System.out.print("*");
//			}
//			System.out.println(" " + count[i]);
//		}
		
		
		/*
		 * 1~5 사이의 랜덤한 값이 10개 저장된 배열에서 중복된 값이 제거된 배열을 만들어주세요.
		 * [5, 5, 3, 5, 2, 2, 2, 5, 5, 5]
		 * [5, 3, 2]
		 * []
		 */
		
		//1번째 방법
//		int[] arr = new int[10];
//		for (int i = 0; i < arr.length; i++) {
//			arr[i] = (int) (Math.random() * 5) + 1;
//		}
//		System.out.println(Arrays.toString(arr));
//
//		int[] temp = new int[5];
//		int count = 0;
//		for (int i = 0; i < arr.length; i++) {
//			boolean flag = false;
//			for (int j = 0; j < temp.length; j++) {
//				if (arr[i] == temp[j]) {
//					flag = true;
//				}
//			}
//			if (flag == false) {
//				temp[count++] = arr[i];
//			}
//		}
//		System.out.println(Arrays.toString(temp));
//
//		int[] result = new int[count];
//		for (int i = 0; i < result.length; i++) {
//			result[i] = temp[i];
//		}
//		System.out.println(Arrays.toString(result));
		
		//2번쨰 방법
//		int[] temp = new int[5];
//		int count = 0;
//		for (int i = 0; i < arr.length; i++) {
//			int flag = 0;
//			for (int j = 0; j < temp.length; j++) {
//				if (arr[i] == temp[j]) {
//					flag = 1;
//				}
//			}
//			if (flag == 0) {
//				temp[count++] = arr[i];
//			}
//		}
//		System.out.println(Arrays.toString(temp));
//
//		int[] result = new int[count];
//		for (int i = 0; i < result.length; i++) {
//			result[i] = temp[i];
//		}
//		System.out.println(Arrays.toString(result));

		/*
		 * 정렬
		 * - 석차구하기 : 정수를 비교해 작은 점수의 등수를 증가시키는 방식
		 * - 선택정렬 : 가장 적은 숫자를 찾아서 앞으로 보내는 방식
		 * - 버블정렬 : 바로 뒤의 숫자와 비교해서 큰수를 뒤로 보내는 방식
		 * - 삽입 정렬 : 두번쨰 숫자부터 앞의 숫자들과 비교해서 큰수는 뒤로 밀고 중간에 삽입하는 방식
		 */
		int[] arr = new int[10];
		for(int i = 0; i < arr.length; i++){
			arr[i] = (int)(Math.random()*100)+1;
		}
		System.out.println(Arrays.toString(arr));
		
		
		//석차구하기
		int[] rank = new int[arr.length];
		
		for(int i = 0; i <rank.length; i++){
			rank[i] = 1;
		}
		
		for(int i = 0; i < arr.length; i++){
			for(int j = 0; j < arr.length; j++){
				if(arr[i] < arr[j]){
					rank[i]++;
				}
			}
		}
//		
		System.out.println(Arrays.toString(rank));
		
		//선택정렬
		/*
		 * i,j
		 * 0,1  0,2  0,3  0,4  0,5  0,6  0,7  0,8  0,9
		 * 1,2  1,3  1,4  1,5  1,6  1,7  1,8  1,9
		 * 2,3  2,4  3,5  3,6  3,7  3,8  3,9
		 * 4,5  4,6  4,7  4,8  4,9
		 * 5,6  5,7  5,8  5,9
		 * 6,7  6,8  6,9
		 * 7,8  7,9
		 * 8,9
		 */
		
//		for(int i =0; i < arr.length-1; i++){
//			int min = i;
//			for(int j = i + 1; j<arr.length; j++){
//				if(arr[j]<arr[min]){
//					min = j;
//				}
//			}
//			int temp = arr[i];
//			arr [i] = arr[min];
//			arr [min] = temp;
//		}
//		System.out.println(Arrays.toString(arr));
		
		//버블정렬
		/*
		 * i,j
		 * 0,1  1,2  2,3  4,5  5,6  6,7  0,7  7,8  8,9
		 * 0,1  1,2  2,3  4,5  5,6  6,7  1,8  7,8
		 * 0,1  1,2  2,3  4,5  5,6  6,7  3,9
		 * 0,1  1,2  2,3  4,5  5,6
		 * 0,1  1,2  2,3  4,5
		 * 0,1  1,2  2,3  
		 * 0,1  1,2
		 * 0,1
		 */
		
//		for (int i = 0; i < arr.length - 1; i++) {
//			for (int j = 0; j < arr.length - i - 1; j++) {
//				if (arr[j] > arr[j + 1]) {
//					int temp = arr[j];
//					arr[j] = arr[j + 1];
//					arr[j + 1] = temp;
//
//				}
//			}
//		}
//		System.out.println(Arrays.toString(arr));
		
//		for (int i = 0; i < arr.length - 1; i++) {
//			boolean flag = false;
//			for (int j = 0; j < arr.length - i - 1; j++) {
//				if (arr[j] > arr[j + 1]) {
//					int temp = arr[j];
//					arr[j] = arr[j + 1];
//					arr[j + 1] = temp;
//					flag = true;
//				}
//			}
//			if (flag == false) {// !flag도 가능
//				break;
//			}
//		}
//		System.out.println(Arrays.toString(arr));
		
		//삽입정렬
		/*
		 *  i,j
		 *  1,0
		 *  2,1  2,0
		 *  3,2  3,1  3,0
		 *  4,3  4,2  4,1  4,0
		 *  5,4  5,3  5,2  5,1  5,0
		 *  6,5  6,4  6,3  6,2  6,1  6,0
		 *  7,6  7,5  7,4  7,3  7,2  7,1  7,0
		 *  8,7  8,6  8,5  8,4  8,3  8,2  8,1  8,0
		 *  9,8  9,7  9,6  9,5  9,4  9,3  9,2  9,1  9,0
		 */

		for(int i = 0; i < arr.length; i++){
			int key = arr[i];
			int j = 0;
			for(j = i - 1; j >= 0; j--){
				if(key<arr[j]){
					arr[j+1] = arr[j];
				}else{
					break;
				}
			}arr[j+1] = key;
		}System.out.println(Arrays.toString(arr));


